{"version":3,"sources":["components/Feedback/Statistics/Statistics.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Feedback.js","components/App.js","index.js"],"names":["Statistics","Good","this","props","state","Neutral","Bad","total","positivePercentage","Component","FeedbackOptions","good","neutral","bad","onClick","Feedback","handleGood","setState","prevState","handleNeutral","handleBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAEqBA,E,4JACnB,WACE,IAAQC,EAASC,KAAKC,MAAMC,MAApBH,KACAI,EAAYH,KAAKC,MAAMC,MAAvBC,QACAC,EAAQJ,KAAKC,MAAMC,MAAnBE,IAER,OACE,oCACE,uDAEA,+BACE,4CACA,wCAAWL,KACX,2CAAcI,KACd,uCAAUC,KACV,yCAAYJ,KAAKC,MAAMI,WACvB,oDACqB,IAClBL,KAAKC,MAAMK,qBACRN,KAAKC,MAAMK,qBACX,EAJN,iB,GAhB8BC,aCAnBC,E,4JACnB,WACE,IAAQC,EAAST,KAAKC,MAAdQ,KACAC,EAAYV,KAAKC,MAAjBS,QACAC,EAAQX,KAAKC,MAAbU,IACR,OACE,qCACE,wBAAQC,QAASH,EAAjB,kBACA,wBAAQG,QAASF,EAAjB,qBACA,wBAAQE,QAASD,EAAjB,wB,GATqCJ,aCExBM,E,4MACnBX,MAAQ,EAAKD,MAAMC,M,EAEnBY,WAAa,WACX,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAAEjB,KAAMiB,EAAUjB,KAAO,O,EAGvDkB,cAAgB,WACd,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAAEb,QAASa,EAAUb,QAAU,O,EAG7De,UAAY,WACV,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAAEZ,IAAKY,EAAUZ,IAAM,O,EAGrDe,mBAAqB,WACnB,OAAO,EAAKjB,MAAMH,KAAO,EAAKG,MAAMC,QAAU,EAAKD,MAAME,K,EAE3DgB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKpB,MAAMH,KAAO,EAAKoB,qBAAwB,M,4CAGpE,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEV,KAAMT,KAAKc,WACXJ,QAASV,KAAKiB,cACdN,IAAKX,KAAKkB,UACVb,MAAOL,KAAKmB,mBACZb,mBAAoBN,KAAKoB,gCACzBlB,MAAOF,KAAKE,e,GAhCgBK,aCDjBgB,E,4MACnBrB,MAAQ,CACNH,KAAM,EACNI,QAAS,EACTC,IAAK,G,4CAEP,WACE,OACE,8BACE,cAAC,EAAD,CAAUF,MAAOF,KAAKE,c,GATGK,aCEjCiB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.8cbd2f7e.chunk.js","sourcesContent":["import { Component } from 'react';\r\n\r\nexport default class Statistics extends Component {\r\n  render() {\r\n    const { Good } = this.props.state;\r\n    const { Neutral } = this.props.state;\r\n    const { Bad } = this.props.state;\r\n\r\n    return (\r\n      <section>\r\n        <h2>Please leave feedback</h2>\r\n\r\n        <ul>\r\n          <h3>Statistics</h3>\r\n          <li>Good: {Good}</li>\r\n          <li>Neutral: {Neutral}</li>\r\n          <li>Bad: {Bad}</li>\r\n          <li>Total: {this.props.total()}</li>\r\n          <li>\r\n            Positive feedback:{' '}\r\n            {this.props.positivePercentage()\r\n              ? this.props.positivePercentage()\r\n              : 0}\r\n            %\r\n          </li>\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\r\n\r\nexport default class FeedbackOptions extends Component {\r\n  render() {\r\n    const { good } = this.props;\r\n    const { neutral } = this.props;\r\n    const { bad } = this.props;\r\n    return (\r\n      <>\r\n        <button onClick={good}>Good</button>\r\n        <button onClick={neutral}>Neutral</button>\r\n        <button onClick={bad}>Bad</button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\n\r\nexport default class Feedback extends Component {\r\n  state = this.props.state;\r\n\r\n  handleGood = () => {\r\n    this.setState(prevState => ({ Good: prevState.Good + 1 }));\r\n  };\r\n\r\n  handleNeutral = () => {\r\n    this.setState(prevState => ({ Neutral: prevState.Neutral + 1 }));\r\n  };\r\n\r\n  handleBad = () => {\r\n    this.setState(prevState => ({ Bad: prevState.Bad + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return this.state.Good + this.state.Neutral + this.state.Bad;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round((this.state.Good / this.countTotalFeedback()) * 100);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <FeedbackOptions />\r\n        <Statistics\r\n          good={this.handleGood}\r\n          neutral={this.handleNeutral}\r\n          bad={this.handleBad}\r\n          total={this.countTotalFeedback}\r\n          positivePercentage={this.countPositiveFeedbackPercentage}\r\n          state={this.state}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\r\nimport Feedback from './Feedback/Feedback';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    Good: 0,\r\n    Neutral: 0,\r\n    Bad: 0,\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Feedback state={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}